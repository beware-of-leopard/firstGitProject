body {
  background-color: teal;
  background: linear-gradient(to bottom right, teal, lightblue);
  padding: 5px;
}

h1 {
  text-align: center;
}

h1, div h2 {
  color: white;
}

.author-box{
  text-align: center;
}
.author-photo {
  border-radius: 100%;
  padding-top: 5px;
}

.author-box:hover {
  color:white;
  outline: dotted white;
}

span {
  font-size: 2.5em;
  color: white;
  font-family: cursive;
  font-weight: bold;
  padding-right: 3px;
}

ol {
  list-style-type:none;
}

.highlighted-link {
  font-size: 1.5em;
}

.alert{
  font-family: georgia;
  padding:10px;
  color:orange;
}

/*Found box-shadow on the mozilla dev page linked from the iron yard online page and played around with it a bit*/
li img{
  box-shadow: 5px 5px 5px black;
}

li img:hover{
  box-shadow: -5px 5px 5px black;
}

li img:active{
  box-shadow: none;
}

.box {
  height:500px;
  color: white;
  border: 3px solid black;
}

/*.box1{
  background-color:black;
}

.box2{
  background-color:blue;
}

.box3{
  background-color:red;
}*/
/*Used mozilla to refresh myself on media queries as well. Initally I used floats to create a two column grid but I figured I'd give flexbox a try because I'd never used it before. I read about it here: https://css-tricks.com/snippets/css/a-guide-to-flexbox/*/

@media (min-width:1100px){
  
  .container {
    display: flex;

    /*creates multiple rows when needed*/
    flex-flow: row wrap;
  }
  
  
  /*the "order" property allows you to pull an "item" out of the normal order and display it first like I do here. Seems like this would be really useful when designing for smaller screens (especially when there are more than two items that you want to stack) because you can rearrange and specify the exact order the items appear in the columns if you need to.*/
  .sidebar {
    order: -1;
    /*background-color: grey;*/
  }

  .item{
    max-width: 600px;
    min-width: 280px;
    padding: 20px;
  }

  .box1 {
    order: 5;
  }

  .box2 {
    order: 4;
  }

  .box3 {
    order: 3;
  }
 
}